
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  username           String?
  email          String    @unique
  hashedPassword String?  // To store the password if using credentials provider
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  posts          Post[]
  comments       Comment[]
}
model Post {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  slug       String    @unique
  content    String
  excerpt    String?
  coverImage String?
  published  Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  authorId   String    @db.ObjectId
  author     User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments   Comment[]
  categoryIds String[]   @db.ObjectId
  categories  Category[] @relation(fields: [categoryIds], references: [id])
  tagIds      String[]   @db.ObjectId
  tags        Tag[]      @relation(fields: [tagIds], references: [id])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  createdAt DateTime @default(now())
  authorId  String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Category {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String @unique
  slug    String @unique
  postIds String[] @db.ObjectId
  posts   Post[]   @relation(fields: [postIds], references: [id])
}

model Tag {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String @unique
  slug    String @unique
  postIds String[] @db.ObjectId
  posts   Post[]   @relation(fields: [postIds], references: [id])
}
